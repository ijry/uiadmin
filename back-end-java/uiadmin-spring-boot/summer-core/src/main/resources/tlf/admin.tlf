package ${targetPackage}.admin;

import ${targetPackage}.entity.${entity};
import ${targetPackage}.service.I${entity}Service;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;

import java.util.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.jiangruyi.summer.core.security.SecurityUtil;
import com.jiangruyi.summer.core.util.ApiReturnObject;
import com.jiangruyi.summer.core.util.ApiReturnUtil;
import com.jiangruyi.summer.core.util.Tree;
import com.jiangruyi.summer.core.util.xybuilder.XyBuilderForm;
import com.jiangruyi.summer.core.util.xybuilder.XyBuilderList;
import com.jiangruyi.summer.core.annotation.MenuItem;
import jakarta.servlet.http.HttpServletRequest;

import io.swagger.v3.oas.annotations.*;
import io.swagger.v3.oas.annotations.tags.Tag;

/**
 * ${tableComment} Admin Controller 后台管理控制器
 *
 * ${author}
 * ${date}
 */
@Tag(name = "后台-${tableComment}", description = "")
@RestController("${entity}AdminController")
@RequestMapping("/api")
public class ${entity}Controller {
    @Autowired
    private I${entity}Service ${entityFirstToLowerCase}Service;

    /**
	 * ${tableComment}列表
	 */
    @Operation(summary = "${tableComment}列表")
    @MenuItem(title = "${tableComment}列表", path = "/${entityFirstToLowerCase}/lists", pmenu = "${pmenu}", menuType = 1,
        routeType = "list", apiSuffix = "", apiParams = "", apiMethod = "GET", sortnum = 0)
	@GetMapping("/v1/admin/${entityFirstToLowerCase}/lists")
    @PreAuthorize("hasAnyAuthority('ROLE_SUPER_ADMIN', '/v1/admin/${entityFirstToLowerCase}/lists')")
	public ApiReturnObject lists(HttpServletRequest request) {
        // 查询条件
        QueryWrapper<${entity}> queryWrapper = new QueryWrapper<>();
        queryWrapper.orderByDesc("id");

        // 多条件筛选
        #for
        // ${tableInfo.columnCommentOrigin}筛选${ln}
        String ${tableInfo.columnName} = request.getParameter("${tableInfo.columnName}");${ln}
        if (!StringUtils.isBlank(${tableInfo.columnName})) {${ln}
            queryWrapper.eq("${tableInfo.columnName}", ${tableInfo.columnName});${ln}
        }
        #end
        // 获取前台发送过来的分页数据
        Integer pageNo = 1;
        if (request.getParameter("page") != null) {
            pageNo = Integer.valueOf(request.getParameter("page"));
        }
        Integer pageSize = 10;
        if (request.getParameter("limit") != null) {
            pageSize = Integer.valueOf(request.getParameter("limit"));
        }
        Page<${entity}> page = new Page<${entity}>(pageNo, pageSize);

        // 查询列表
		IPage<${entity}> dataPage = ${entityFirstToLowerCase}Service.page(page,queryWrapper);
    
        // 格式转换
        JSONArray js = (JSONArray) JSON.toJSON(dataPage.getRecords());

        // 使用Builder生成列表页面
        XyBuilderList listBuilder = new XyBuilderList();
        listBuilder.addTopButton("add", "新增", new HashMap<String, Object>() {{
            put("title", "新增");
            put("pageType", "drawer"); // drawer/modal/page
            put("modalType", "form");
            put("api", "/v1/admin/${entityFirstToLowerCase}/add");
            put("apiSuffix", new ArrayList());
            put("querySuffix", new ArrayList() {{
            }});
            put("width", "1000px");
        }});
        // 多条件筛选
        #for
        listBuilder.addFilterItem("${tableInfo.columnName}", "${tableInfo.columnComment}", "${tableInfo.filterType}", ${tableInfo.columnName}, new HashMap<String, Object>() {{
            #filterExtra
        }});
        #end
        #for
        listBuilder.addColumn("${tableInfo.columnName}", "${tableInfo.columnComment}", new HashMap<String, Object>() {{
            #listExtra
        }});
        #end
        listBuilder.addColumn("rightButtonList", "操作", new HashMap<String, Object>() {{
            put("type", "rightButtonList");
            put("minWidth", "160px");
        }});
        listBuilder.addRightButton("info", "详情", new HashMap<String, Object>() {{
            put("modalType", "form");
            put("pageType", "drawer");
            put("api", "/v1/admin/${entityFirstToLowerCase}/info");
            put("width", "1000px");
            put("apiSuffix", new ArrayList(){{ 
                add("id");
            }});
            put("title", "详情");
        }});
        listBuilder.addRightButton("edit", "修改", new HashMap<String, Object>() {{
            put("modalType", "form");
            put("pageType", "drawer");
            put("api", "/v1/admin/${entityFirstToLowerCase}/edit");
            put("width", "1000px");
            put("apiSuffix", new ArrayList(){{ 
                add("id");
            }});
            put("title", "修改");
        }}, new HashMap<String, Object>() {{
            put("type", "warning");
        }});
        listBuilder.addRightButton("delete", "删除", new HashMap<String, Object>() {{
            put("title", "确认要删除该记录吗？");
            put("pageType", "modal");
            put("modalType", "confirm");
            put("okText", "确认删除");
            put("cancelText", "取消操作");
            put("content", "确认要删除该记录吗？");
            put("api", "/v1/admin/${entityFirstToLowerCase}/delete");
            put("apiSuffix", new ArrayList(){{
                add("id");
            }});
            put("querySuffix", new ArrayList() {{
            }});
            put("width", "500px");
        }}, new HashMap<String, Object>() {{
            put("type", "danger");
        }});
        listBuilder.setDataList(js);
        // listBuilder.setTableName("${tableName}");
        listBuilder.setDataPage(dataPage.getTotal(), dataPage.getCurrent(), dataPage.getSize());
        HashMap listData = listBuilder.getData();

        // 添加一层listData
        JSONObject result = new JSONObject();
        result.put("listData", listData);

		return ApiReturnUtil.success(result);
    }

    /**
     * 新增表单
     */
    @Operation(hidden = true, summary = "${tableComment}新增表单")
    @MenuItem(title = "${tableComment}新增表单", path = "/${entityFirstToLowerCase}/add", pmenu = "/${entityFirstToLowerCase}/lists", menuType = 2,
        routeType = "form", apiSuffix = "", apiParams = "", apiMethod = "GET", sortnum = 0)
    @GetMapping(path = "/v1/admin/${entityFirstToLowerCase}/add")
    @PreAuthorize("hasAnyAuthority('ROLE_SUPER_ADMIN', '/v1/admin/${entityFirstToLowerCase}/add')")
    public ApiReturnObject add(HttpServletRequest request, @RequestBody(required = false) ${entity} bodyData) {
        // 使用Builder生成列表页面
        XyBuilderForm formBuilder = new XyBuilderForm();
        #for
        formBuilder.addFormItem("${tableInfo.columnName}", "${tableInfo.columnComment}", "${tableInfo.formType}", "", new HashMap<String, Object>() {{
            #formExtra
        }});
        #end
        formBuilder.setConfig("submitApi", "/v1/admin/${entityFirstToLowerCase}/doAdd");
        formBuilder.setConfig("labelPosition", "top");
        Map<String, Object> formData = formBuilder.getData();

        // 添加一层formData
        JSONObject result = new JSONObject();
        result.put("formData", formData);

        return ApiReturnUtil.success(result);
    }

    /**
     * 新增
     */
    @Operation(summary = "${tableComment}新增保存", description="新增一条${tableComment}数据")
    @MenuItem(title = "${tableComment}新增保存", path = "/${entityFirstToLowerCase}/doAdd", pmenu = "/${entityFirstToLowerCase}/lists", menuType = 2,
        routeType = "form", apiSuffix = "", apiParams = "", apiMethod = "POST", sortnum = 0)
    @PostMapping(path = "/v1/admin/${entityFirstToLowerCase}/doAdd")
    @PreAuthorize("hasAnyAuthority('ROLE_SUPER_ADMIN', '/v1/admin/${entityFirstToLowerCase}/doAdd')")
    public ApiReturnObject doAdd(HttpServletRequest request, @RequestBody(required = false) ${entity} bodyData) {
        // if("POST".equals(request.getMethod())){
            Date today = new Date();
            // bodyData.setCreateTime(today);
            // bodyData.setUpdateTime(today);
            // bodyData.setStatus(1);
            if (!${entityFirstToLowerCase}Service.save(bodyData)) {
                return ApiReturnUtil.error(0, "添加出错");
            }
            return ApiReturnUtil.success("添加成功");
        // }
    }

    /**
     * 编辑表单
     */
    @Operation(hidden = true, summary = "${tableComment}编辑表单")
    @MenuItem(title = "${tableComment}编辑表单", path = "/${entityFirstToLowerCase}/edit", pmenu = "/${entityFirstToLowerCase}/lists", menuType = 2,
        routeType = "form", apiSuffix = "", apiParams = "", apiMethod = "GET", sortnum = 0)
    @GetMapping(path = "/v1/admin/${entityFirstToLowerCase}/edit/{id}")
    @PreAuthorize("hasAnyAuthority('ROLE_SUPER_ADMIN', '/v1/admin/${entityFirstToLowerCase}/edit')")
    public ApiReturnObject edit(HttpServletRequest request, @PathVariable String id) {
        // 获取记录
        ${entity} info = ${entityFirstToLowerCase}Service.getById(id);

        // 使用Builder生成页面
        XyBuilderForm formBuilder = new XyBuilderForm();
        #for
        formBuilder.addFormItem("${tableInfo.columnName}", "${tableInfo.columnComment}", "${tableInfo.formType}", "", new HashMap<String, Object>() {{
            #formExtra
        }});
        #end
        formBuilder.setFormValues(info);
        formBuilder.setFormMethod("put");
        formBuilder.setConfig("submitApi", "/v1/admin/${entityFirstToLowerCase}/doEdit/" + id);
        formBuilder.setConfig("labelPosition", "top");
        Map<String, Object> formData = formBuilder.getData();

        // 添加一层formData
        JSONObject result = new JSONObject();
        result.put("formData", formData);

        return ApiReturnUtil.success(result);
    }

    /**
    * 编辑
    */
    @Operation(summary = "${tableComment}修改保存", description="修改${tableComment}数据")
    @MenuItem(title = "${tableComment}修改保存", path = "/${entityFirstToLowerCase}/doEdit", pmenu = "/${entityFirstToLowerCase}/lists", menuType = 2,
        routeType = "form", apiSuffix = "", apiParams = "", apiMethod = "PUT", sortnum = 0)
    @PutMapping(path = "/v1/admin/${entityFirstToLowerCase}/doEdit/{id}")
    @PreAuthorize("hasAnyAuthority('ROLE_SUPER_ADMIN', '/v1/admin/${entityFirstToLowerCase}/doEdit')")
    public ApiReturnObject doEdit(HttpServletRequest request, @PathVariable String id, @RequestBody(required = false) ${entity} bodyData) {
        // if("PUT".equals(request.getMethod())){
            Date today = new Date();
            // bodyData.setUpdateTime(today);
            if (!${entityFirstToLowerCase}Service.updateById(bodyData)) {
                return ApiReturnUtil.error(0, "修改出错");
            }
            return ApiReturnUtil.success("修改成功");
        // }
    }

    /**
     * 详情
     */
    @Operation(summary = "${tableComment}详情", description="获取${tableComment}详情")
    @MenuItem(title = "${tableComment}详情", path = "/${entityFirstToLowerCase}/info", pmenu = "/${entityFirstToLowerCase}/lists", menuType = 2,
        routeType = "form", apiSuffix = "", apiParams = "", apiMethod = "GET", sortnum = 0)
    @GetMapping("/v1/admin/${entityFirstToLowerCase}/info/{id}")
    @PreAuthorize("hasAnyAuthority('ROLE_SUPER_ADMIN', '/v1/admin/${entityFirstToLowerCase}/info')")
    public ApiReturnObject info(HttpServletRequest request, @PathVariable String id) {
        // 获取记录
        ${entity} info = ${entityFirstToLowerCase}Service.getById(id);

        // 使用Builder生成页面
        XyBuilderForm formBuilder = new XyBuilderForm();
        #for
        formBuilder.addFormItem("${tableInfo.columnName}", "${tableInfo.columnComment}", "${tableInfo.formType}", "",new HashMap<String, Object>() {{
            #formExtra
            put("disabled", true);
        }});
        #end
        formBuilder.setFormValues(info);
        Map<String, Object> formData = formBuilder.getData();

        // 添加一层formData
        JSONObject result = new JSONObject();
        result.put("formData", formData);

        return ApiReturnUtil.success(result);
    }

    /**
	 * 删除
	 */
    @Operation(summary = "${tableComment}删除", description="删除一个${tableComment}")
    @MenuItem(title = "${tableComment}删除", path = "/${entityFirstToLowerCase}/delete", pmenu = "/${entityFirstToLowerCase}/lists", menuType = 2,
        routeType = "confirm", apiSuffix = "/:id", apiParams = "", apiMethod = "DELETE", sortnum = 0)
    @DeleteMapping("/v1/admin/${entityFirstToLowerCase}/delete/{id}")
    @PreAuthorize("hasAnyAuthority('ROLE_SUPER_ADMIN', '/v1/admin/${entityFirstToLowerCase}/delete')")
    public ApiReturnObject delete(HttpServletRequest request, @PathVariable String id,
        @RequestBody(required = false) Map<String, Object> postData) {
        boolean ret = ${entityFirstToLowerCase}Service.removeById(id);
        if (!ret) {
            return ApiReturnUtil.error(0, "删除出错");
        }
        return ApiReturnUtil.success("删除成功");
    }

    /**
	 * 批量删除
	 */
    @Operation(summary = "${tableComment}批量删除", description="批量删除多个${tableComment}")
    @MenuItem(title = "${tableComment}批量删除", path = "/${entityFirstToLowerCase}/deleteBatch", pmenu = "/${entityFirstToLowerCase}/lists", menuType = 2,
        routeType = "confirm", apiSuffix = "", apiParams = "", apiMethod = "DELETE", sortnum = 0)
    @DeleteMapping("/v1/admin/${entityFirstToLowerCase}/deleteBatch")
    @PreAuthorize("hasAnyAuthority('ROLE_SUPER_ADMIN', '/v1/admin/${entityFirstToLowerCase}/deleteBatch')")
    public ApiReturnObject deleteBatch(HttpServletRequest request,
        @RequestBody(required = false) Map<String, List> postData) {
        List ids = postData.get("ids");
        boolean ret = ${entityFirstToLowerCase}Service.removeByIds(ids);
        if (!ret) {
            return ApiReturnUtil.error(0, "批量删除出错");
        }
        return ApiReturnUtil.success("批量删除成功");
    }
}
